import streamlit as st
from PIL import Image

from processing.intensity import negative, log_transform, gamma_correction, piecewise_linear
from processing.histogram import hist_equalization, clahe_equalization
from processing.applications import enhance_license_plate, enhance_satellite_image, enhance_low_light_image, restore_document_image
from utils.image_io import pil_to_np, np_to_pil
from utils.plot import plot_histogram

st.title("X·ª≠ l√Ω ·∫£nh - Ti·ªÉu lu·∫≠n 1")

uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh...", type=["jpg", "png", "jpeg"])

if uploaded_file:
    image = Image.open(uploaded_file)
    img = pil_to_np(image)
    
    tab1, tab2, tab3 = st.tabs(["Bi·∫øn ƒë·ªïi c∆∞·ªùng ƒë·ªô s√°ng", "C√¢n b·∫±ng histogram", "·ª®ng d·ª•ng th·ª±c t·∫ø"])
    
    with tab1:
        method = st.selectbox(
            "Ch·ªçn ph∆∞∆°ng ph√°p c∆∞·ªùng ƒë·ªô s√°ng",
            ["Negative", "Log", "Gamma", "Piecewise-linear"],
        )

        # X·ª≠ l√Ω c√°c ph∆∞∆°ng ph√°p bi·∫øn ƒë·ªïi c∆° b·∫£n
        import cv2
        if method == "Gamma":
            gamma_val = st.slider("Ch·ªçn Gamma", 0.1, 3.0, 1.0, 0.1)
            processed = gamma_correction(img, gamma_val)
            display_original = image
        elif method == "Piecewise-linear":
            st.caption("Bi·∫øn ƒë·ªïi tuy·∫øn t√≠nh t·ª´ng ƒëo·∫°n (contrast stretching)")
            col_a, col_b = st.columns(2)
            with col_a:
                r1 = st.slider("r1", 0, 255, 50)
                r2 = st.slider("r2", 0, 255, 200)
            with col_b:
                s1 = st.slider("s1", 0, 255, 20)
                s2 = st.slider("s2", 0, 255, 230)
            # ƒê·∫£m b·∫£o r2 > r1 h·ª£p l·ªá (h√†m x·ª≠ l√Ω c≈©ng t·ª± b·∫£o v·ªá)
            processed = piecewise_linear(img, r1, s1, r2, s2)
            display_original = image
        elif method == "Negative":
            processed = negative(img)
            display_original = image
        elif method == "Log":
            processed = log_transform(img)
            display_original = image

        # Hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh sau bi·∫øn ƒë·ªïi song song nhau
        st.subheader("So s√°nh k·∫øt qu·∫£")
        col1, col2 = st.columns(2)
        with col1:
            st.image(display_original, caption="·∫¢nh g·ªëc", use_container_width=True)
        with col2:
            st.image(processed, caption=f"·∫¢nh sau {method}", use_container_width=True)
            
        # Hi·ªÉn th·ªã histogram g·ªëc v√† histogram sau bi·∫øn ƒë·ªïi song song
        st.subheader("So s√°nh histogram")
        col1, col2 = st.columns(2)
        with col1:
            st.image(plot_histogram(img), caption="Histogram g·ªëc", use_container_width=True)
        with col2:
            st.image(plot_histogram(processed), caption=f"Histogram sau {method}", use_container_width=True)
            
        # T·∫°o ph·∫ßn t·∫£i xu·ªëng ·ªü gi·ªØa m√†n h√¨nh
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            # T·∫£i xu·ªëng ·∫£nh k·∫øt qu·∫£
            result_pil = np_to_pil(processed)
            st.download_button("üì• T·∫£i ·∫£nh k·∫øt qu·∫£", 
                            data=result_pil.tobytes(),
                            file_name=f"result_{method}.png",
                            mime="image/png",
                            key="download_intensity")
    with tab2:
        st.caption("C√¢n b·∫±ng l∆∞·ª£c ƒë·ªì m·ª©c x√°m (Histogram Equalization / CLAHE)")
        he_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p c√¢n b·∫±ng", ["Histogram Equalization", "CLAHE"]) 
        import cv2
        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY) if len(img.shape) == 3 else img
        if he_method == "Histogram Equalization":
            processed_he = hist_equalization(gray_img)
        else:
            clip = st.slider("Clip Limit", 1.0, 5.0, 2.0, 0.1)
            grid = st.slider("Tile Grid Size", 4, 16, 8, 1)
            processed_he = clahe_equalization(gray_img, clip, grid)

        # So s√°nh ·∫£nh g·ªëc (x√°m) v√† ·∫£nh sau HE/CLAHE
        st.subheader("So s√°nh k·∫øt qu·∫£")
        c1, c2 = st.columns(2)
        with c1:
            st.image(gray_img, caption="·∫¢nh g·ªëc (grayscale)", use_container_width=True)
        with c2:
            st.image(processed_he, caption=f"·∫¢nh sau {he_method}", use_container_width=True)

        st.subheader("So s√°nh histogram")
        c1, c2 = st.columns(2)
        with c1:
            st.image(plot_histogram(gray_img), caption="Histogram g·ªëc", use_container_width=True)
        with c2:
            st.image(plot_histogram(processed_he), caption=f"Histogram sau {he_method}", use_container_width=True)

        # N√∫t t·∫£i xu·ªëng
        d1, d2, d3 = st.columns([1, 2, 1])
        with d2:
            result_pil = np_to_pil(processed_he)
            st.download_button(
                "üì• T·∫£i ·∫£nh k·∫øt qu·∫£",
                data=result_pil.tobytes(),
                file_name=f"result_{he_method}.png",
                mime="image/png",
                key="download_hist",
            )
    with tab3:
        application = st.selectbox(
            "Ch·ªçn ·ª©ng d·ª•ng th·ª±c t·∫ø",
            ["X·ª≠ l√Ω bi·ªÉn s·ªë xe", "C·∫£i thi·ªán ·∫£nh v·ªá tinh", "X·ª≠ l√Ω ·∫£nh √°nh s√°ng k√©m", "Kh√¥i ph·ª•c ·∫£nh gi·∫•y t·ªù"]
        )
        
        if application == "X·ª≠ l√Ω bi·ªÉn s·ªë xe":
            st.info("Ti·ªÅn x·ª≠ l√Ω ·∫£nh bi·ªÉn s·ªë xe ƒë·ªÉ t·ªëi ∆∞u cho nh·∫≠n d·∫°ng k√Ω t·ª± (OCR). K·∫øt qu·∫£ l√† ·∫£nh nh·ªã ph√¢n v·ªõi k√Ω t·ª± r√µ n√©t.")
            
            processed = enhance_license_plate(img)
        elif application == "C·∫£i thi·ªán ·∫£nh v·ªá tinh":
            st.info("C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ·∫£nh v·ªá tinh ƒë·ªÉ h·ªó tr·ª£ ph√¢n t√≠ch trong c√°c h·ªá th·ªëng th√¥ng tin ƒë·ªãa l√Ω (GIS).")
            processed = enhance_satellite_image(img)
        elif application == "X·ª≠ l√Ω ·∫£nh √°nh s√°ng k√©m":
            st.info("N√¢ng cao ch·∫•t l∆∞·ª£ng ·∫£nh ch·ª•p trong ƒëi·ªÅu ki·ªán √°nh s√°ng k√©m, c·∫£i thi·ªán ƒë·ªô s√°ng v√† ƒë·ªô t∆∞∆°ng ph·∫£n.")
            processed = enhance_low_light_image(img)
        elif application == "Kh√¥i ph·ª•c ·∫£nh gi·∫•y t·ªù":
            st.info("Kh√¥i ph·ª•c ch·∫•t l∆∞·ª£ng ·∫£nh gi·∫•y t·ªù c≈©, m·ªù ho·∫∑c b·ªã h∆∞ h·ªèng ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh r√µ r√†ng c·ªßa vƒÉn b·∫£n.")
            
            # Th√™m t√πy ch·ªçn ki·ªÉu output
            output_type = st.radio(
                "Ch·ªçn ki·ªÉu k·∫øt qu·∫£:",
                ["·∫¢nh x√°m", "·∫¢nh nh·ªã ph√¢n"],
                index=0
            )
            
            binary_output = (output_type == "·∫¢nh nh·ªã ph√¢n")
            processed = restore_document_image(img, binary_output)

        # B·∫£o ƒë·∫£m ·∫£nh hi·ªÉn th·ªã lu√¥n h·ª£p l·ªá (k·ªÉ c·∫£ khi l√† ·∫£nh x√°m/nh·ªã ph√¢n)
        import cv2
        import numpy as np
        if processed is None:
            processed_safe = img
        else:
            processed_safe = np.array(processed)
            if processed_safe.dtype != np.uint8:
                processed_safe = np.clip(processed_safe, 0, 255).astype(np.uint8)
        # For display, convert gray => RGB to avoid theme quirks
        processed_vis = (
            cv2.cvtColor(processed_safe, cv2.COLOR_GRAY2RGB)
            if processed_safe.ndim == 2
            else processed_safe
        )

        st.subheader("So s√°nh k·∫øt qu·∫£")
        col1, col2 = st.columns(2)
        with col1:
            st.image(image, caption="·∫¢nh g·ªëc", use_container_width=True)
        with col2:
            st.image(processed_vis, caption=f"·∫¢nh sau khi x·ª≠ l√Ω ({application})", use_container_width=True)
            
        st.subheader("So s√°nh histogram")
        col1, col2 = st.columns(2)
        with col1:
            st.image(plot_histogram(img), caption="Histogram g·ªëc", use_container_width=True)
        with col2:
            st.image(plot_histogram(processed_safe), caption="Histogram sau x·ª≠ l√Ω", use_container_width=True)
        
        # T·∫°o ph·∫ßn t·∫£i xu·ªëng ·ªü gi·ªØa m√†n h√¨nh
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            result_pil = np_to_pil(processed_safe)
            st.download_button("üì• T·∫£i ·∫£nh k·∫øt qu·∫£", 
                            data=result_pil.tobytes(),
                            file_name=f"result_{application}.png",
                            mime="image/png",
                            key="download_application")
